;=======================================
;	<< WAITKEY_LIB.ASM >>
;===========================================
;----------------------

	
WAITKEY_FLAG:

	RTS

WAITKEY:
	LDA	#0
	STA	DP_USER_FLAG_A
	STA	DP_USER_FLAG_B
.IFDEF C_CHKSKEY_EN
	.IF( (C_SKEY0_EN .EQ. 1).OR.(C_SKEY1_EN .EQ. 1).OR.(C_SKEY2_EN .EQ. 1).OR.(C_SKEY3_EN .EQ. 1).OR.(C_SKEY4_EN .EQ. 1).OR.(C_SKEY5_EN .EQ. 1).OR.(C_SKEY6_EN .EQ. 1).OR.(C_SKEY7_EN .EQ. 1)  )
	STA	DP_SKEY_FLAG0
	.ENDIF
	.IF( (C_SKEY8_EN .EQ. 1).OR.(C_SKEY9_EN .EQ. 1).OR.(C_SKEY10_EN .EQ. 1).OR.(C_SKEY11_EN .EQ. 1).OR.(C_SKEY12_EN .EQ. 1).OR.(C_SKEY13_EN .EQ. 1).OR.(C_SKEY14_EN .EQ. 1).OR.(C_SKEY15_EN .EQ. 1)  )
	STA	DP_SKEY_FLAG1
	.ENDIF
	.IF( (C_SKEY16_EN .EQ. 1).OR.(C_SKEY17_EN .EQ. 1).OR.(C_SKEY18_EN .EQ. 1).OR.(C_SKEY19_EN .EQ. 1).OR.(C_SKEY20_EN .EQ. 1).OR.(C_SKEY21_EN .EQ. 1).OR.(C_SKEY22_EN .EQ. 1).OR.(C_SKEY23_EN .EQ. 1)  )
	STA	DP_SKEY_FLAG2
	.ENDIF
.ENDIF
;
WAITKEY_S10:

;
	
	MR_TEST_TMGX_GAP_FLAG
	BEQ	WAITKEY_TMGX_RET
	MR_CLR_TMGX_GAP_FLAG

;================================
;2MS
	JMP	WAITKEY_TMGX
WAITKEY_TMGX_RET:
;================================
	
	
	LDA	<DP_USER_FLAG_A
	BNE	WAITKEY_FLAG
	LDA	<DP_USER_FLAG_B;
	BNE	WAITKEY_FLAG

.IFDEF C_CHKSKEY_EN
	.IF( (C_SKEY0_EN .EQ. 1).OR.(C_SKEY1_EN .EQ. 1).OR.(C_SKEY2_EN .EQ. 1).OR.(C_SKEY3_EN .EQ. 1).OR.(C_SKEY4_EN .EQ. 1).OR.(C_SKEY5_EN .EQ. 1).OR.(C_SKEY6_EN .EQ. 1).OR.(C_SKEY7_EN .EQ. 1)  )
	LDA	<DP_SKEY_FLAG0
	BNE	WAITKEY_FLAG
	.ENDIF
	.IF( (C_SKEY8_EN .EQ. 1).OR.(C_SKEY9_EN .EQ. 1).OR.(C_SKEY10_EN .EQ. 1).OR.(C_SKEY11_EN .EQ. 1).OR.(C_SKEY12_EN .EQ. 1).OR.(C_SKEY13_EN .EQ. 1).OR.(C_SKEY14_EN .EQ. 1).OR.(C_SKEY15_EN .EQ. 1)  )
	LDA	<DP_SKEY_FLAG1
	BNE	WAITKEY_FLAG
	.ENDIF
	.IF( (C_SKEY16_EN .EQ. 1).OR.(C_SKEY17_EN .EQ. 1).OR.(C_SKEY18_EN .EQ. 1).OR.(C_SKEY19_EN .EQ. 1).OR.(C_SKEY20_EN .EQ. 1).OR.(C_SKEY21_EN .EQ. 1).OR.(C_SKEY22_EN .EQ. 1).OR.(C_SKEY23_EN .EQ. 1)  )
	LDA	<DP_SKEY_FLAG2
	BNE	WAITKEY_FLAG
	.ENDIF
.ENDIF


;==============================
	JMP	WAITKEY_CHK
WAITKEY_CHK_RET:
	
;==============================

.IF	(C_SPCH1_ENABLE .EQ. 1)
;CHECK SPCH1 / mixed MS
	LDA	<USER_FLAG10
	BIT	#C_CHK_SPCH1_BIT
	BEQ	WAITKEY_SPCH1END_RET
;
	CHK_BUSY_CH1;
	BNE	WAITKEY_SPCH1END_RET
	
.IF ( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	MR_AUTOSLEEP_SPCH1_FREE
.ENDIF

	LDA	#C_CHK_SPCH1_BIT
	TRB	<USER_FLAG10
;SET FLAG
;check EQU
.IFDEF C_EQU0_EN
	MR_DET_EQU_BUSY
	BEQ WAITKEY_SPCH1END_S10
	
	M_SET_EQU_NEXT_FLAG
	JMP	WAITKEY_SPCH1END
.ENDIF;C_EQU0_EN
WAITKEY_SPCH1END_S10:
	LDA	#C_SPCH1_BIT
	TSB	<DP_USER_FLAG_A

;==================================
	JMP	WAITKEY_SPCH1END
.ENDIF ; C_SPCH1_ENABLE .EQ. 1
WAITKEY_SPCH1END_RET:
;==================================
	
.IF (C_SPCH2_ENABLE .EQ. 1)
;CHECK SPCH2
	LDA	<USER_FLAG10
	BIT	#C_CHK_SPCH2_BIT
	BEQ	WAITKEY_SPCH2END_RET
;
	CHK_BUSY_CH2
	BNE	WAITKEY_SPCH2END_RET

.IF ( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	MR_AUTOSLEEP_SPCH2_FREE
.ENDIF;( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	
	LDA	#C_CHK_SPCH2_BIT
	TRB	<USER_FLAG10
;SET FLAG
	LDA	#C_SPCH2_BIT
	TSB	<USER_FLAG_A

;==================================
	JMP	WAITKEY_SPCH2END
.ENDIF ; C_SPCH2_ENABLE .EQ. 1
WAITKEY_SPCH2END_RET:
;==================================

.IF (C_SPCH3_ENABLE .EQ. 1)
;CHECK SPCH3
	LDA	<USER_FLAG10
	BIT	#C_CHK_SPCH3_BIT
	BEQ	WAITKEY_SPCH3END_RET
;
	CHK_BUSY_CH3
	BNE	WAITKEY_SPCH3END_RET

.IF ( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	MR_AUTOSLEEP_SPCH3_FREE
.ENDIF;( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	
	LDA	#C_CHK_SPCH3_BIT
	TRB	<USER_FLAG10
;SET FLAG
	LDA	#C_SPCH3_BIT
	TSB	<USER_FLAG_A

;==================================
	JMP	WAITKEY_SPCH3END
.ENDIF ; C_SPCH3_ENABLE .EQ. 1
WAITKEY_SPCH3END_RET:
;==================================


.IF ( C_MS1_ENABLE .EQ. 1 )
;CHECK MS1
	LDA	<USER_FLAG10
	BIT	#C_CHK_MS1_BIT
	BEQ	WAITKEY_MS1END_RET
;
	CHK_BUSY_MS
	BEQ	WAITKEY_MS_FREE
;
.IF( C_MIDI_END_EVENT .EQ. 1)
	LDA #B_USER_MS1_BUSY ; check midi end event
	BIT <USER_FLAG20
	BEQ	WAITKEY_MS_FREE
;	LDA	#1
.ENDIF
	BRA	WAITKEY_MS1END_RET
WAITKEY_MS_FREE:

	LDA	#C_CHK_MS1_BIT
	TRB	<USER_FLAG10
;SET FLAG

.IF ( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	MR_AUTOSLEEP_SPCH1_FREE
.ENDIF

;	LDA	#C_CHK_SPCH1_BIT
;	TRB	<USER_FLAG10
;SET FLAG
;check EQU
	.IFDEF C_EQU0_EN
	MR_DET_EQU_BUSY
	BEQ WAITKEY_MS1END_S10
	
	M_SET_EQU_NEXT_FLAG
	JMP	WAITKEY_MS1END_RET
	.ENDIF;C_EQU0_EN
WAITKEY_MS1END_S10:

	LDA	#C_MS1_BIT
	TSB	<DP_USER_FLAG_A
	
;==================================
	JMP	WAITKEY_MS1END
.ENDIF ; C_MS1_ENABLE .EQ. 1
WAITKEY_MS1END_RET:
;==================================
.IF	(C_SPMD_ENABLE .EQ. 1)
;CHECK SPCH1 & SPCH2 & mixed MS
	LDA	<USER_FLAG10
	BIT	#C_CHK_SPMD_BIT
	BEQ	WAITKEY_SPMD_RET
;
	CHK_BUSY_CH1;
	BNE	WAITKEY_SPMD_RET
	CHK_BUSY_CH2;
	BNE	WAITKEY_SPMD_RET
	CHK_BUSY_MS;
	BNE	WAITKEY_SPMD_RET
	
	.IF ( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	MR_AUTOSLEEP_SPMD_FREE
	.ENDIF;( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )

	LDA	#C_CHK_SPMD_BIT
	TRB	<USER_FLAG10
;SET FLAG
;check EQU
	.IFDEF C_EQU0_EN
	MR_DET_EQU_BUSY
	BEQ WAITKEY_SPMD_S10
	
	M_SET_EQU_NEXT_FLAG
	JMP	WAITKEY_SPMD
	.ENDIF;C_EQU0_EN
WAITKEY_SPMD_S10:
	LDA	#C_SPMD_BIT
	TSB	<USER_FLAG_A

;==================================
	JMP	WAITKEY_SPMD
.ENDIF ; (C_SPMD_ENABLE .EQ. 1)
WAITKEY_SPMDEND_RET:

.IF	(C_EVO1_ENABLE .EQ. 1)
;CHECK EVO1 / mixed MS
	LDA	<USER_FLAG10
	BIT	#C_CHK_EVO1_BIT
	BEQ	WAITKEY_EVO1END_RET
;
	CHK_BUSY_EVO1
	BNE	WAITKEY_EVO1END_RET
	
	LDA	#C_CHK_EVO1_BIT
	TRB	<USER_FLAG10
;SET FLAG

;============================= for user
;check EQU
	.IFDEF C_EQU0_EN
	MR_DET_EQU_BUSY
	BEQ WAITKEY_EVO1END_S10
	
	M_SET_EQU_NEXT_FLAG
	JMP	WAITKEY_EVO1END
	.ENDIF
;
WAITKEY_EVO1END_S10:
;============================= for user end
	LDA	#C_EVO1_BIT
	TSB	<USER_FLAG_A

;==================================
	JMP	WAITKEY_EVO1END
.ENDIF ; C_EVO1_ENABLE .EQ. 1
WAITKEY_EVO1END_RET:
;==================================




	JMP	WAITKEY_EVT
WAITKEY_EVT_RET:
;=============================================
;CHECK (8.192MS \ 5.33MS ) 

	MR_TEST_GAPTIME_FLAG
	BNE	WAITKEY_S100

	JMP	WAITKEY_S10
	
WAITKEY_S100:
	MR_CLR_GAPTIME_FLAG
;
;	LDA	USER_FLAG10
;	BIT	#C_BIT3
;	BNE	WAITKEY_FXF15_RET ;STOP TIME
;=============================================
;5.33MS
	JMP	WAITKEY_FXF15
WAITKEY_FXF15_RET:
;=============================================
;===============================
;after LVD check
;===============================
	M_WDT_CLR; SET after LVD

	
;=============================================
;FXF15 *12
	INC	USER_INT_CNT0
	LDA	USER_INT_CNT0
	.IF (C_SYS_CLOCK .EQ. 10000)
	CMP	#5 ;3.22*5
	.ENDIF
	.IF (C_SYS_CLOCK .EQ. 6144)
	CMP	#12
	.ENDIF
	BNE	WAITKEY_S105
	STZ	USER_INT_CNT0
;64MS@6.144MHZ
;32MS@FYS=10MHZ
	JMP	WAITKEY_GAP2
WAITKEY_GAP2_RET:
	
WAITKEY_S105:
;


WAITKEY_S110:

	JMP	WAITKEY_S10
	
;====================================
;BK0_WAIT_DLYCNT0
;====================================
BK0_WAIT_DLYCNT0:
;
;
;CHECK 8.192MS/5.33MS
	MR_TEST_GAPTIME_FLAG
	BNE	BK0_WAIT_DLYCNT0_S100
	
	BRA	BK0_WAIT_DLYCNT0

BK0_WAIT_DLYCNT0_S100:
	MR_CLR_GAPTIME_FLAG
;5.33MS
	M_WDT_CLR; SET after LVD
	LDA	DLYCNT0
	ORA	DLYCNT0+1
	BEQ	BK0_WAIT_DLYCNT0_S110
	INC	DLYCNT0
	BNE	BK0_WAIT_DLYCNT0_S110
	INC	DLYCNT0+1
	BNE	BK0_WAIT_DLYCNT0_S110
;	LDA	#CONST_CNT0_BIT
;	TSB	USER_FLAG_B
	RTS
BK0_WAIT_DLYCNT0_S110:
	JMP	BK0_WAIT_DLYCNT0

;==================================================
BK0_STOP_ALL: ; not clear EQU flag
	.IF (C_EVO1_ENABLE .EQ. 1) 
	MR_CHK_EVO1_DIS
	.ENDIF
	MR_CHK_SPCH1_DIS
	MR_CHK_SPCH2_DIS
	MR_CHK_MS1_DIS
	
	.IF (CHIPSERIES = 'N588H') .OR. (CHIPSERIES = 'N588J') .OR. (CHIPSERIES = 'N567G') .OR. (CHIPSERIES = 'N567H') .OR. (CHIPSERIES = 'N567K') .OR. (CHIPSERIES = 'N588L')
		.IF( ( C_SPCH1_ENABLE	.EQ.	1 ) .OR. ( C_SPCH2_ENABLE	.EQ.	1 ).OR. ( C_SPCH3_ENABLE	.EQ.	1 ) )
		JMP STOP_ALL
		.ENDIF
	.ENDIF
	.IF (CHIPSERIES = 'N589A') .OR. (CHIPSERIES = 'N589B') .OR. (CHIPSERIES = 'N589C') .OR. (CHIPSERIES = 'N589D')
		.IF( ( C_SPCH1_ENABLE	.EQ.	1 ) .OR. ( C_SPCH2_ENABLE	.EQ.	1 ).OR. ( C_SPCH3_ENABLE	.EQ.	1 ) )
		STOP_ALL
		.ENDIF
	.ENDIF

	RTS	
;
;-----------------------------
BK0_STOP_SP_MS:;not include EVO
	
	MR_CHK_SPCH1_DIS
	MR_CHK_SPCH2_DIS
	MR_CHK_MS1_DIS
	
	.IF (CHIPSERIES = 'N588H') .OR. (CHIPSERIES = 'N588J') .OR. (CHIPSERIES = 'N567G') .OR. (CHIPSERIES = 'N567H') .OR. (CHIPSERIES = 'N567K') .OR. (CHIPSERIES = 'N588L')
		.IF ( C_SPCH1_ENABLE	.EQ.	1 ) 
		JSR	STOP_CH1
		.ENDIF
		.IF ( C_SPCH2_ENABLE	.EQ.	1 ) 
		JSR	STOP_CH2
		.ENDIF
		.IF ( C_MS1_ENABLE	.EQ.	1 ) 
		JSR	STOP_MS
		.ENDIF
	.ENDIF
	.if (CHIPSERIES = 'N589A') .OR. (CHIPSERIES = 'N589B') .OR. (CHIPSERIES = 'N589C') .OR. (CHIPSERIES = 'N589D')
		.IF ( C_SPCH1_ENABLE	.EQ.	1 ) 
		STOP_CH1
		.ENDIF
		.IF ( C_SPCH2_ENABLE	.EQ.	1 ) 
		STOP_CH2
		.ENDIF
		.IF ( C_MS1_ENABLE	.EQ.	1 ) 
		STOP_MS
		.ENDIF
	.ENDIF
	
	RTS	

;----------------------------------------
BK0_STOP_CH1:
.IF	(C_SPCH1_ENABLE .EQ. 1)
	MR_CHK_SPCH1_DIS
	JMP STOP_CH1
.ENDIF	
	RTS	
BK0_STOP_CH2:
.IF	(C_SPCH2_ENABLE .EQ. 1)
	MR_CHK_SPCH2_DIS
	JMP STOP_CH2
.ENDIF
	RTS	
BK0_STOP_CH3:
.IF	(C_SPCH3_ENABLE .EQ. 1)
	MR_CHK_CH3END_DIS
	JMP STOP_CH3
.ENDIF
	RTS	
BK0_STOP_MS1:
.IF	(C_MS1_ENABLE .EQ. 1)
	MR_CHK_MS1_DIS
	JMP STOP_MS
.ENDIF	
	RTS
BK0_STOP_EVO1:
.IF ( C_EVO1_ENABLE .EQ. 1)
	MR_CHK_EVO1_DIS
	.IF (CHIPSERIES = 'N589A') .OR. (CHIPSERIES = 'N589B') .OR. (CHIPSERIES = 'N589C') .OR. (CHIPSERIES = 'N589D')
	STOP_EVO1
	.ENDIF
	.IF (CHIPSERIES = 'N588H') .OR. (CHIPSERIES = 'N588J') .OR. (CHIPSERIES = 'N567G') .OR. (CHIPSERIES = 'N567H') .OR. (CHIPSERIES = 'N567K') .OR. (CHIPSERIES = 'N588L')
	JSR	STOP_EVO1
	.ENDIF
;	DIS_ULTRAIO_PIN 1
;	DIS_ULTRAIO_PIN 2
;	DIS_ULTRAIO_PIN 3

.ENDIF

	RTS

;==================================
WAIT_DLYCNT0:
	JSR	WAITKEY
WAIT_DLYCNT0_S10:
	M_CHK_CNT0 WAIT_DLYCNT0_CNT0

	JMP	WAIT_DLYCNT0
WAIT_DLYCNT0_CNT0:
;	M_CLR_CNT0_FLAG

WAIT_DLYCNT0_CNT0_S100:
;DLYCNT0 END

	RTS

;=====================================
;not clear to other flag
;=====================================
WAIT_SPCH1_W_CHK:
	LDA	#C_BIT3 ;TEMP USED
	TSB	USER_FLAG10 ;PAUSE DLYCNT
	MR_CHK_SPCH1_EN
WAIT_SPCH1:
	JSR	WAITKEY
WAIT_SPCH1_S10:
	M_CHK_SPCH1 WAIT_SPCH1_SPCH1

	JMP	WAIT_SPCH1
WAIT_SPCH1_SPCH1:
;	M_CLR_SPCH1_FLAG

;SPCH1 END
	LDA	#C_BIT3 ;TEMP USED
	TRB	USER_FLAG10

	RTS
	


.IFDEF C_EQU0_EN
;WAIT_EQU_W_CHK:
	MR_CHK_SPCH1_EN
WAIT_EQU:
	JSR	WAITKEY
WAIT_EQU_S10:
	LDA	DP_USER_FLAG_A
	BIT	#C_SPCH1_BIT
	BNE	WAIT_EQU_SPCH1

	JMP	WAIT_EQU
WAIT_EQU_SPCH1:
;	M_CLR_SPCH1_FLAG

	MR_DET_EQU_BUSY
	BNE	WAIT_EQU_CH1END_S100
;speech
	RTS

WAIT_EQU_CH1END_S100:; EQU
	
.IF ( C_EQU0_EN .EQ. 1 )	
	JSR	L_PLAY_EQU_NEXT
	BNE	WAIT_EQU_CH1END_NEXT ; NEXT
.ENDIF
;EQU END
	MR_EQU_NRL_NEXT

	RTS
	
WAIT_EQU_CH1END_NEXT:
	JMP	WAIT_EQU_S10


.ENDIF



;=================================================



;==========================================
.IF ( C_MS1_ENABLE .EQ. 1 )
CHK_MIDI_STATUS:
	CHK_BUSY_MS
	BEQ	CHK_MIDI_STATUS_FREE
	LDA #B_USER_MS1_BUSY
	BIT <USER_FLAG20
	BEQ	CHK_MIDI_STATUS_FREE
	LDA	#1
	RTS
CHK_MIDI_STATUS_FREE:
	LDA	#0
	RTS
.ENDIF


