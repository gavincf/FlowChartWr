




;==============================================================================
; CODE0
;==============================================================================

;===============================
; in gap time
;===============================
BK0_CHK_LVD:
	LDA	SR_VD_REG
	STA	REG_EA
;
;detect
.IFDEF C_HB_TEST0_EN
	M_CMP_MODE_NO C_TEST0_LVD
	BEQ	BK0_CHK_LVD_TEST ;detect LVD mode: skip speech detect.
.ENDIF
.IF (C_SPCH1_ENABLE.EQ.1)
	CHK_BUSY_CH1;
	BNE	BK0_CHK_LVD_QUIT;BUSY
.ENDIF
.IF (C_SPCH2_ENABLE.EQ.1)
	CHK_BUSY_CH2
	BNE	BK0_CHK_LVD_QUIT;BUSY
.ENDIF
.IF (C_MS1_ENABLE.EQ.1)
	CHK_BUSY_MS
	BNE	BK0_CHK_LVD_QUIT;BUSY
.ENDIF
BK0_CHK_LVD_TEST:
	MR_DET_LVD_ON
	BEQ	BK0_CHK_LVD_QUIT; disable
	
.IF ( C_LVD_DEBUG_IO_EN .EQ. 0 )
	LDA	#C_BIT7
	BIT	REG_EA
	BNE	BK0_CHK_LVD_HIGH
;-----------------------------DEBUG LVD: used IO DEBUG
.ELSE
	MR_DEBUG_LVD_W_PIN
	BNE	BK0_CHK_LVD_HIGH
.ENDIF
;LOW
	STZ	CHK_LVD_DEB_R
;=0: > setting voltage

	LDA	#LVD_ST_BIT
	BIT	LVD_ST_RAM
	BEQ	BK0_CHK_LVD_QUIT
;STORE STATUS
	LDA	#LVD_ST_BIT
	TRB	LVD_ST_RAM
;FALL
	
	JMP	L_CHK_LVD_CLR
L_CHK_LVD_CLR_RET:
	
	BRA	BK0_CHK_LVD_QUIT
	
BK0_CHK_LVD_HIGH:
;< setting voltage
	LDA	#LVD_ST_BIT
	BIT	LVD_ST_RAM
	BNE	BK0_CHK_LVD_QUIT

	LDA	CHK_LVD_DEB_R
	BEQ	BK0_CHK_LVD_HIGH_S10
	INC	CHK_LVD_DEB_R
	BNE	BK0_CHK_LVD_QUIT
;
;STORE STATUS
	LDA	#LVD_ST_BIT
	TSB	LVD_ST_RAM
;trig: =1: < setting voltage
	
	JMP	L_CHK_LVD_SET

BK0_CHK_LVD_HIGH_S10:
;set
;	M_CMP_SYS_MODE_NO C_PWOFF_MODE
;	BNE BK0_CHK_LVD_HIGH_S20
;PWOFF MODE:--------------- SHORT DEB
;	LDA	#C_CHK_LVD_DEB_S
;	BRA	BK0_CHK_LVD_HIGH_S30
;BK0_CHK_LVD_HIGH_S20:
;NORMAL MODE:-------------- LONG DEB
;	LDA	#C_CHK_LVD_DEB_L
;BK0_CHK_LVD_HIGH_S30:
	LDA	<CHK_LVD_DEB_R_BUF
	STA	CHK_LVD_DEB_R

	BRA	BK0_CHK_LVD_QUIT
	
L_CHK_LVD_SET_RET:

BK0_CHK_LVD_QUIT:
	RTS

;==========================================================================
;	revised
;==========================================================================
;=================================
L_CHK_LVD_CLR:
;

	M_SET_VD_FLAG

	JMP	L_CHK_LVD_CLR_RET
	
L_CHK_LVD_SET:
	
	M_SET_VD_FLAG

	JMP	L_CHK_LVD_SET_RET

;------------------------------------
;------------------------------------
CHK_LVD_START_SHORT:
	MR_LVD_ON
	LDA	#C_CHK_LVD_DEB_S
	STA	CHK_LVD_DEB_R_BUF
	JSR	CLR_LVD_ST

	LDA	#LVD_ST_BIT
	TRB	LVD_ST_RAM;  after 'TSB	CTL_CPU',flag=0

	RTS	

;==========================================
CHK_LVD_START_LONG:
	MR_LVD_ON
	LDA	#C_CHK_LVD_DEB_L
	STA	CHK_LVD_DEB_R_BUF
	JSR	CLR_LVD_ST

	LDA	#LVD_ST_BIT
	TRB	LVD_ST_RAM;  after 'TSB	CTL_CPU',flag=0
	
	RTS

CLR_LVD_ST:
	LDA	#LVD_ST_BIT
	TRB	LVD_ST_RAM
	RTS
	
;STORE_LVD_ST:
;store  status
	LDA	SR_VD_REG
	STA	REG_EA
	BIT	#C_BIT7
	BNE	STORE_LVD_ST_HIGH
	LDA	#LVD_ST_BIT
	TRB	LVD_ST_RAM
	RTS
STORE_LVD_ST_HIGH:
	LDA	#LVD_ST_BIT
	TSB	LVD_ST_RAM
	RTS
;------------------------------------
;STORE_LVD_ST_INV:
;store inverse statusl
	LDA	SR_VD_REG
	STA	REG_EA
	BIT	#C_BIT7
	BNE	STORE_LVD_ST_INV_HIGH
	LDA	#LVD_ST_BIT
	TSB	LVD_ST_RAM
	RTS
STORE_LVD_ST_INV_HIGH:
	LDA	#LVD_ST_BIT
	TRB	LVD_ST_RAM
	RTS
;===============================
CHK_LVD_STOP:
	MR_LVD_OFF
	RTS



;==============================================================================
; CODE0
;==============================================================================

	
;===========================================
CHK_LVD_START_POI:
	
	N589_SET_VD C_N589_VD_3D0V

	JSR	CHK_LVD_START_SHORT
	
	RTS
