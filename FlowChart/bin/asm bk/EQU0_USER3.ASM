;=============================================
; BK0:
;=========================
;	in bank0
;=========================

;=============================================
COUNT_EQU0_DLYCNT:
	LDA	EQU0_DLYCNT
	ORA	EQU0_DLYCNT+1
	BEQ	COUNT_EQU0_DLYCNT_S10
	INC	EQU0_DLYCNT
	BNE	COUNT_EQU0_DLYCNT_S10
	INC	EQU0_DLYCNT+1
	BNE	COUNT_EQU0_DLYCNT_S10
;
	MR_DET_EQU_BUSY
	BEQ	COUNT_EQU0_DLYCNT_S10 ; not equ; stop timer

	LDA	#C_EQU_NEXT_BIT
	TSB	<DP_USER_FLAG_B
;
;EQU END
	
COUNT_EQU0_DLYCNT_S10:
.IF ( C_EQU0BG1_EN .EQ. 1)
	LDA	EQU0BG1_DLYCNT
	ORA	EQU0BG1_DLYCNT+1
	BEQ	L_EQU0BG1CNT_USER_RET
	INC	EQU0BG1_DLYCNT
	BNE	L_EQU0BG1CNT_USER_RET
	INC	EQU0BG1_DLYCNT+1
	BNE	L_EQU0BG1CNT_USER_RET
	
	JMP	L_EQU0BG1CNT_USER
	
L_EQU0BG1CNT_USER_RET:
	
COUNT_EQU0_DLYCNT_S20:
.ENDIF
.IF ( C_EQU0BG2_EN .EQ. 1)
	LDA	EQU0BG2_DLYCNT
	ORA	EQU0BG2_DLYCNT+1
	BEQ	L_EQU0BG2CNT_USER_RET
	INC	EQU0BG2_DLYCNT
	BNE	L_EQU0BG2CNT_USER_RET
	INC	EQU0BG2_DLYCNT+1
	BNE	L_EQU0BG2CNT_USER_RET
	
	JMP	L_EQU0BG2CNT_USER
	
L_EQU0BG2CNT_USER_RET:
	
COUNT_EQU0_DLYCNT_S30:
.ENDIF
	JMP	COUNT_EQU0_DLYCNT_RET


BK0_PLAY_EQU_NEXT:

	LDA	#.HIGH8.L_PLAY_EQU_NEXT
	STA	BANK
	JMP	L_PLAY_EQU_NEXT

;====================================
BK0_PLAY_EQU:

	LDA	#.HIGH8.L_PLAY_EQU
	STA	BANK
	JMP	L_PLAY_EQU

;==========================================
BK0_STOP_EQU0:
	
	LDA	#.HIGH8.L_STOP_EQU
	STA	BANK
	JMP	L_STOP_EQU


BK0_STOP_EQU_W_CALI:
	JSR	BK0_STOP_SP_MS; STOP CURRENT SPEECH
;	
.IFDEF C_WIPER_EN
	JSR	BK0_SET_WP1_PATT_CALI; TO END POSITION
.ENDIF
	RTS


