
MR_SET_EQU0_DLYCNT MACRO VALUE
	LDA	#.LOW.VALUE
	STA	EQU0_DLYCNT
	LDA	#.HIGH.VALUE
	STA	EQU0_DLYCNT+1

	ENDM

MR_PLAY_EQU_GROUP_NOP MACRO VALUE
	JSR	BK0_STOP_EQU0
	JSR	BK0_STOP_ALL
	LDA	#VALUE
	STA	R_EQU_NO

.IFDEF C_GROUP_EN
	LDA	#C_GP_NOP_IDX
	STA	R_GROUP_NO
.ENDIF
	
	JSR	BK0_PLAY_EQU
	ENDM
MR_PLAY_EQU_RANDOM_GP_NOP MACRO VALUE
	JSR	BK0_STOP_EQU0
	JSR	BK0_STOP_ALL
	LDA	#VALUE
	STA	R_EQU_NO

.IFDEF C_RANDOM_TABLE_USED
	LDA	#C_RANDOM_GP_NOP
	STA	R_RANDOM_GP_NO
.ENDIF
	
	JSR	BK0_PLAY_EQU
	
	ENDM
	
MR_PLAY_EQU_RANDOM_GP_NOP_STOP_IDLE MACRO VALUE
	JSR	BK0_STOP_EQU0
	JSR	BK0_STOP_ALL
	LDA	#VALUE
	STA	R_EQU_NO

.IFDEF C_RANDOM_TABLE_USED
	LDA	#C_RANDOM_GP_NOP
	STA	R_RANDOM_GP_NO
.ENDIF
	
	JSR	BK0_PLAY_EQU
	
	JSR	L_STOP_IDLE;CNT0

	ENDM
MR_PLAY_EQU_RANDOM_GP_NOP_STOP_IDLE_TIME MACRO VALUE
	JSR	BK0_STOP_EQU0
	JSR	BK0_STOP_ALL
	LDA	#VALUE
	STA	R_EQU_NO

.IFDEF C_RANDOM_TABLE_USED
	LDA	#C_RANDOM_GP_NOP
	STA	R_RANDOM_GP_NO
.ENDIF
	
	JSR	BK0_PLAY_EQU
	
	JSR	L_STOP_IDLE_TIME;CNT0

	ENDM

MR_PLAY_EQU_GROUP_NOP_STOP_IDLE MACRO VALUE
	JSR	BK0_STOP_EQU0
	JSR	BK0_STOP_ALL
.IFDEF C_GROUP_EN
	LDA	#C_GP_NOP_IDX
	STA	R_GROUP_NO
.ENDIF

	LDA	#VALUE
	STA	R_EQU_NO
	
	JSR	BK0_PLAY_EQU
	
	JSR	L_STOP_IDLE;CNT0
	
	ENDM
MR_PLAY_EQU_GROUP_NOP_STOP_IDLE_TIME MACRO VALUE
	JSR	BK0_STOP_EQU0
	JSR	BK0_STOP_ALL
.IFDEF C_GROUP_EN
	LDA	#C_GP_NOP_IDX
	STA	R_GROUP_NO
.ENDIF
	
	LDA	#VALUE
	STA	R_EQU_NO

	JSR	BK0_PLAY_EQU
	
	JSR	L_STOP_IDLE_TIME;CNT0
	
	ENDM

MR_SET_EQU_FG MACRO
	LDA	#C_BIT7
	TSB	<USER_FLAG20
	ENDM

MR_SET_SP_FG MACRO
	LDA	#C_BIT7
	TRB	<USER_FLAG20
	ENDM
	
MR_DET_EQU_BUSY MACRO ; 
	LDA	#C_BIT7
	BIT	<USER_FLAG20
	ENDM

MR_EQU_NRL_NEXT MACRO
;NORMAL TO NEXT EQU_DLY/EQU_SP
	LDA	#C_BIT6
	TRB	USER_FLAG20
	ENDM
MR_EQU_EVT_NEXT MACRO
;EVT TO NEXT EQU_DLY/EQU_SP
	LDA	#C_BIT6
	TSB	USER_FLAG20
	ENDM
MR_DET_EQU_EVT_NEXT MACRO
;in 'M_EQU_NEXT_JMP'
	LDA	#C_BIT6
	BIT	USER_FLAG20
	ENDM
	
MR_SPCH1_TO_EQU_END MACRO VALUE
	LDA	#.LOW.VALUE
	STA	SPCH1_NO
	LDA	#.HIGH.VALUE
	STA	SPCH1_NO1
;
	JSR	BK0_SPCH1_TO_EQU_END
	
	ENDM
MR_SET_NEXT_EQU MACRO VALUE
	LDA	#VALUE
	STA	R_EQU_NEXT
	
.IFDEF C_GROUP_EN
	LDA	#C_GP_NOP_IDX
	STA	R_GROUP_NO
.ENDIF
	
	ENDM
MR_CMP_EQU_NO MACRO VALUE
	LDA	R_EQU_NO
	CMP	#VALUE
	ENDM


;=============================================
;detect specified EQU busy
;used for detect >1 EQU continuely
;
;---------------------------------------------
;	MR_DET_EQU_NO_BUSY C_EQU1,L_FREE1,L_BUSY
;L_FREE1:
;	MR_DET_EQU_NO_BUSY C_EQU2,L_FREE2,L_BUSY
;L_FREE2:
;=============================================
MR_DET_EQU_NO_BUSY MACRO C_EQU_NO,L_EQU_FREE,L_EQU_BUSY
	MR_DET_EQU_BUSY
	BNE	3
	JMP	L_EQU_FREE
	MR_CMP_EQU_NO C_EQU_NO
	BEQ	3
	JMP	L_EQU_FREE
;CUR EQU BUSY
	ENDM


M_SET_EQU0BG1CNT0_IDX MACRO VALUE,IDX
	LDA	#.LOW.VALUE
	STA	EQU0BG1_DLYCNT
	LDA	#.HIGH.VALUE
	STA	EQU0BG1_DLYCNT+1
;
	LDA	#IDX
	STA	EQU0BG1_DLYCNT_IDX
	ENDM

M_SET_EQU0BG2CNT0_IDX MACRO VALUE,IDX
	LDA	#.LOW.VALUE
	STA	EQU0BG2_DLYCNT
	LDA	#.HIGH.VALUE
	STA	EQU0BG2_DLYCNT+1
;
	LDA	#IDX
	STA	EQU0BG2_DLYCNT_IDX
	ENDM
;--------------------------------
MR_DET_EQU0_SPCH1_EN MACRO
	LDA	#C_BIT0
	BIT	EQU0_FLAG
	ENDM
MR_CHK_EQU0_SPCH1_EN MACRO
	LDA	#C_BIT0
	TSB	EQU0_FLAG
	ENDM
MR_CHK_EQU0_SPCH1_DIS MACRO
	LDA	#C_BIT0
	TRB	EQU0_FLAG
	ENDM

