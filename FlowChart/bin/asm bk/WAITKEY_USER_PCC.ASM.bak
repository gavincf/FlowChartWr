




;=========================================================================
; CODE0
;=========================================================================

;T1_FREE_J1:
;	JMP	T1_FREE
WAITKEY_CHK:

.IF (CHIPSERIES = 'N589A') .OR. (CHIPSERIES = 'N589B') .OR. (CHIPSERIES = 'N589C') .OR. (CHIPSERIES = 'N589D')
;	MR_DET_CHK_TOUCH_EN
;	BEQ	T1_FREE_J1
	;-----------------------------------------
	; Cap Sensor Detection looping
	; ruguo check touched will jmp to key label
	;-----------------------------------------
	.IF(WITH_FW_CAP_SENSOR_KEYS .GT. 0)
		CAP_SENSOR_ACTION    
		CAP_SENSOR_KEY_DETECTION
	M_WDT_CLR

		IS_CAP_COUNTER_READY 1
		BNE	3
		JMP T1_FREE
		
		.IF ( C_TOUCH_IIC_ENABLE .EQ. 1 )
		GET_CAP_BASELINE 1, T1_BASE
		GET_CAP_COUNTER_DEVIATION 1, T1_DEVIA
		.ENDIF

;		I2C_WRITE_NB_RAM 2, T1_DEVIA
T1_FREE:
	.ENDIF ; (WITH_FW_CAP_SENSOR_KEYS .GT. 0)
;-----------------------------------------
.ENDIF
	
;=========================================
WAITKEY_CHK_PCC:
	.IF ( C_RANDOM0_EN .EQ. 1 )
	INC	<RANDOM0
	.ENDIF

	.IF ( C_SWPWM_PATT_EN .EQ. 1 )
	JMP	BK0_DET_PATT
BK0_DET_PATT_RET:
	.ENDIF ;( C_SWPWM_PHECATT_EN .EQ. 1 )
	
	M_CMP_SYS_MODE_NO C_TEST0_MODE
	BNE	WAITKEY_CHK_PCC_S10
;TEST MODE
;
	MR_BMA222E_RD INT_STATUS_0
	LDA	R_BMA253_rtn
	BIT	#C_BIT5
	BEQ	WAITKEY_CHK_PCC_S10
;s tap trig
	;NOP
	M_SET_KEYCH1_FLAG

WAITKEY_CHK_PCC_S10:	
	
WAITKEY_CHK_PCC_END:


	JMP	WAITKEY_CHK_RET

;===================================

WAITKEY_TMGX:
	
WAITKEY_TMGX_PCC:

WAITKEY_TMGX_PCC_END:

	JMP	WAITKEY_TMGX_RET

;===============================================

;=================================
WAITKEY_SPCH1END:

WAITKEY_SPCH1END_PCC:
WAITKEY_SPCH1END_PCC_END:


	
	JMP	WAITKEY_SPCH1END_RET

;=================================
WAITKEY_SPCH2END:

WAITKEY_SPCH2END_PCC:

WAITKEY_SPCH2END_PCC_END:


	JMP	WAITKEY_SPCH2END_RET

;==============================
WAITKEY_MS1END:

WAITKEY_MS1END_PCC:

WAITKEY_MS1END_PCC_END:


	JMP	WAITKEY_MS1END_RET
;=================================
WAITKEY_SPMDEND:

WAITKEY_SPMDEND_PCC:
WAITKEY_SPMDEND_PCC_END:

	
	JMP	WAITKEY_SPMDEND_RET

;=================================
WAITKEY_EVO1END:

WAITKEY_EVO1END_PCC:
	
WAITKEY_EVO1END_PCC_END:
	

	
	JMP	WAITKEY_EVO1END_RET

;=================================

WAITKEY_EVT:

WAITKEY_EVT_PCC:

WAITKEY_EVT_PCC_END:

	JMP	WAITKEY_EVT_RET
	

;=========================================================================
; CODE1
;=========================================================================
WAITKEY_FXF15:
;3.22MS@FYS=10MHZ;max =820ms@1byte
;5.33MS@FYS=6.144MHZ;max =1350ms@1byte
	
	
	M_CMP_MODE_NO	0E3H
	BNE	WAITKEY_FXF15_S100
	
	JSR	L_XMOV_OV

	BRA	WAITKEY_FXF15_PCC
	JSR	BK0_CHK_LVD
WAITKEY_FXF15_S100:
	M_CMP_MODE_NO	0E4H
	BNE	WAITKEY_FXF15_S200
	
	JSR	L_YMOV_OV

	BRA	WAITKEY_FXF15_PCC
WAITKEY_FXF15_S200:
	M_CMP_MODE_NO	0E5H
	BNE	WAITKEY_FXF15_S300
	
	JSR	L_ZMOV_OV

	BRA	WAITKEY_FXF15_PCC
WAITKEY_FXF15_S300:

	JSR	L_KANXIE_OV
	JSR	L_FORWARDSTRIKE_OV

	
;TAP_DLYCNT_EXIT:
WAITKEY_FXF15_PCC:
	.IF ( C_RANDOM1_EN .EQ. 1 )
	INC	<RANDOM1
	.ENDIF


	JSR	BK0_CHKSKEY
	
	JMP	COUNT_EQU0_DLYCNT
COUNT_EQU0_DLYCNT_RET:
	.IF ( C_EQU0_FLAG_EN .EQ. 1 )
	JSR	L_DET_EQU_FLAG
	.ENDIF

WAITKEY_FXF15_PCC_END:



WAITKEY_FXF15_S10:
;	LDA	USER_FLAG10;multi used flag bit
;	BIT	#C_BIT3
;	BEQ	COUNT_DLYCNT_S10
;	BRA	COUNT_DLYCNT_QUIT
COUNT_DLYCNT_S10:
.IF (C_DLYCNT0_ENABLE .EQ. 1)
	LDA	DLYCNT0
	ORA	DLYCNT0+1
	BEQ	COUNT_DLYCNT_S20
	INC	DLYCNT0
	BNE	COUNT_DLYCNT_S20
	INC	DLYCNT0+1
	BNE	COUNT_DLYCNT_S20
	LDA	#C_CNT0_BIT
	TSB	<DP_USER_FLAG_B

COUNT_DLYCNT_S20:
.ENDIF
.IF (C_DLYCNT1_ENABLE .EQ. 1)
	LDA	DLYCNT1
	ORA	DLYCNT1+1
	BEQ	COUNT_DLYCNT_S30
	INC	DLYCNT1
	BNE	COUNT_DLYCNT_S30
	INC	DLYCNT1+1
	BNE	COUNT_DLYCNT_S30
	LDA	#C_CNT1_BIT
	TSB	<DP_USER_FLAG_B

COUNT_DLYCNT_S30:
.ENDIF
.IF (C_DLYCNT2_ENABLE .EQ. 1)
	LDA	DLYCNT2
	ORA	DLYCNT2+1
	BEQ	COUNT_DLYCNT2_END_J1
	INC	DLYCNT2
	BNE	COUNT_DLYCNT2_END_J1
	INC	DLYCNT2+1
	BNE	COUNT_DLYCNT2_END_J1
	LDA	#C_CNT2_BIT
	TSB	<DP_USER_FLAG_B

	BRA	COUNT_DLYCNT2_S10
COUNT_DLYCNT2_END_J1:
	JMP	COUNT_DLYCNT2_END
COUNT_DLYCNT2_S10:

.IF ( C_TOUCH_IIC_ENABLE .EQ. 1 )
	M_SET_CNT2 (1000000H-500*100/C_100GAP_FXF15)
	
	I2C_ON
		I2C_WRITE 0XEA
		
		I2C_WRITE_NB_RAM 1, T1_BASE
		I2C_WRITE_NB_RAM 1, T1_BASE+1
		I2C_WRITE_NB_RAM 1, T1_DEVIA
		I2C_WRITE_NB_RAM 1, T1_DEVIA+1

		I2C_WRITE 60
		I2C_WRITE 30
		I2C_WRITE 7
	I2C_OFF
.ENDIF

COUNT_DLYCNT2_END:
.ENDIF ;(C_DLYCNT2_ENABLE .EQ. 1)

.IF ( C_DLYCNT3_ENABLE .EQ. 1 )
	LDA	DLYCNT3
	ORA	DLYCNT3+1
	BEQ	COUNT_DLYCNT3_END
	INC	DLYCNT3
	BNE	COUNT_DLYCNT3_END
	INC	DLYCNT3+1
	BNE	COUNT_DLYCNT3_END
	LDA	#C_CNT3_BIT
	TSB	<DP_USER_FLAG_B

COUNT_DLYCNT3_END:
.ENDIF

COUNT_DLYCNT_QUIT:

.IFDEF C_BID_M0_EN
	LDA	R_M1_DLYCNT
	ORA	R_M1_DLYCNT+1
	BEQ	COUNT_DLYCNT_S40
	INC	R_M1_DLYCNT
	BNE	COUNT_DLYCNT_S40
	INC	R_M1_DLYCNT+1
	BNE	COUNT_DLYCNT_S40
;
;	MR_SET_M1_STOP
;

	MR_SET_M1_STOP_W_BUF
	
COUNT_DLYCNT_S40:
.ENDIF

.IFDEF C_WIPER1_EN
	.IF (C_WP1_DLYCNT_EN .EQ. 1)
	JMP	L_WP1_PATT_CNT
L_WP1_PATT_CNT_RET:
	.ENDIF
.ENDIF

.IFDEF C_M1_EN
;	JSR	CNT_M1_INV_PROT_DLY;反向保护计时
.ENDIF

;===============================
;after LVD module(N588HJ,N588L,N567GHK)
;===============================
;--------------------------------
	JMP	WAITKEY_FXF15_RET
;==================================
;=================================


WAITKEY_GAP2:

WAITKEY_GAP2_PCC:
	JSR F_BMA253_ReadXYZ
;
	
	JSR F_Gsensor_SaveXYZ
	JSR	L_GET_AVR_P
;
;	JMP	L_CHK_6_DIR
L_CHK_6_DIR_RET:

	
	M_CMP_MODE_NO	0E3H
	BNE	WAITKEY_GAP2_PCC_S100

	JSR	CHK_XMOV
	BRA	WAITKEY_GAP2_PCC_END
WAITKEY_GAP2_PCC_S100:
	M_CMP_MODE_NO	0E4H
	BNE	WAITKEY_GAP2_PCC_S200

	JSR	CHK_YMOV
	BRA	WAITKEY_GAP2_PCC_END
WAITKEY_GAP2_PCC_S200:
	M_CMP_MODE_NO	0E5H
	BNE	WAITKEY_GAP2_PCC_S300

	JSR	CHK_ZMOV
	BRA	WAITKEY_GAP2_PCC_END
WAITKEY_GAP2_PCC_S300:

	JSR	CHK_KANXIE
	JSR	CHK_FORWARDSTRIKE

WAITKEY_GAP2_PCC_END:
	
WAITKEY_GAP2B_PCC:
WAITKEY_GAP2B_PCC_END:


;----------------------
	JMP	L_AUTOCNT
L_AUTOCNT_RET:


	JMP	WAITKEY_GAP2_RET
	

;==================================
;==================================



INIT_WB_KEYCH:

	LDA	#C_NOP

.IF ( C_KEYCH_MAX .GT. 0 )
	STA	<WB_KEYCH_CODE
.ENDIF

.IF ( C_KEYCH_MAX .GT. 1 )
	STA	<WB_KEYCH_CODE+1
.ENDIF
	
.IF ( C_KEYCH_MAX .GT. 2 )
	STA	<WB_KEYCH_CODE+2
.ENDIF
.IF ( C_KEYCH_MAX .GT. 3 )
	STA	<WB_KEYCH_CODE+3
.ENDIF

	RTS

USER_TMGX_ISR:
	
USER_TMGX_ISR_PCC:
	JSR	L_PWMS_SOLVE_SUB

	
	JMP	USER_TMGX_ISR_RET
USER_TMGX_ISR_PCC_END:

;========================================
BK0_AUTOCNT_BUSY:
	LDA	#1
	RTS
BK0_AUTOCNT_DET:
	
BK0_AUTOCNT_DET_PWOFF:
.IFDEF C_EQU0_EN
	MR_DET_EQU_BUSY
	BNE	BK0_AUTOCNT_BUSY; EQU BUSY
.ENDIF
.IFDEF  C_CHKSKEY_EN
.IF ( C_SKEY0_EN .EQ. 1)
	LDA	R_SKEY0_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY1_EN .EQ. 1)
	LDA	R_SKEY1_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY2_EN .EQ. 1)
	LDA	R_SKEY2_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY3_EN .EQ. 1)
	LDA	R_SKEY3_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY4_EN .EQ. 1)
	LDA	R_SKEY4_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY5_EN .EQ. 1)
	LDA	R_SKEY5_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY6_EN .EQ. 1)
	LDA	R_SKEY6_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY7_EN .EQ. 1)
	LDA	R_SKEY7_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY8_EN .EQ. 1)
	LDA	R_SKEY8_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY9_EN .EQ. 1)
	LDA	R_SKEY9_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY
.ENDIF
.IF ( C_SKEY10_EN .EQ. 1)
	LDA	R_SKEY10_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY11_EN .EQ. 1)
	LDA	R_SKEY11_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY12_EN .EQ. 1)
	LDA	R_SKEY12_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY13_EN .EQ. 1)
	LDA	R_SKEY13_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY14_EN .EQ. 1)
	LDA	R_SKEY14_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY15_EN .EQ. 1)
	LDA	R_SKEY15_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY16_EN .EQ. 1)
	LDA	R_SKEY16_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY17_EN .EQ. 1)
	LDA	R_SKEY17_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY18_EN .EQ. 1)
	LDA	R_SKEY18_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY19_EN .EQ. 1)
	LDA	R_SKEY19_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY20_EN .EQ. 1)
	LDA	R_SKEY20_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY21_EN .EQ. 1)
	LDA	R_SKEY21_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY22_EN .EQ. 1)
	LDA	R_SKEY22_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SKEY23_EN .EQ. 1)
	LDA	R_SKEY23_DEB
	AND	#7FH
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.ENDIF

.IFDEF C_CHK1KEY1_EN
	JSR	BK0_DET_CHK1KEY1_SLEEP
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IFDEF C_CHK1KEY2_EN
	JSR	BK0_DET_CHK1KEY2_SLEEP
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF

.IFDEF C_CHKMKEY_EN
	JSR	BK0_DET_CHKMKEY
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_SPCH1_ENABLE .EQ. 1)
	LDA	<USER_FLAG10
	BIT	#C_CHK_SPCH1_BIT
	BEQ BK0_AUTOCNT_DET_S100
	CHK_BUSY_CH1
	BNE	BK0_AUTOCNT_BUSY1
	M_DET_MIX_SPCH1MS_EN
	BEQ	BK0_AUTOCNT_DET_S100
	CHK_BUSY_MS
	BNE	BK0_AUTOCNT_BUSY1
BK0_AUTOCNT_DET_S100:
.ENDIF
.IF ( C_SPCH2_ENABLE .EQ. 1)
	CHK_BUSY_CH2
	BNE	BK0_AUTOCNT_BUSY1
.ENDIF
.IF ( C_MS1_ENABLE .EQ. 1)
	LDA	<USER_FLAG10
	BIT	#C_CHK_MS1_BIT
	BEQ BK0_AUTOCNT_DET_S300
	CHK_BUSY_MS
	BNE	BK0_AUTOCNT_BUSY1
BK0_AUTOCNT_DET_S300:
.ENDIF
BK0_AUTOCNT_DET_PCC:


BK0_AUTOCNT_DET_PCC_END:

	LDA	#0
	RTS
BK0_AUTOCNT_BUSY1:
	LDA	#1
	RTS

;=================================
BK0_ENTER_STOP_CLRKEY:

.IFDEF  C_CHKSKEY_EN
	LDA	#07FH
.IF ( C_SKEY0_EN .EQ. 1)
	TRB	R_SKEY0_DEB
.ENDIF
.IF ( C_SKEY1_EN .EQ. 1)
	TRB	R_SKEY1_DEB
.ENDIF
.IF ( C_SKEY2_EN .EQ. 1)
	TRB	R_SKEY2_DEB
.ENDIF
.IF ( C_SKEY3_EN .EQ. 1)
	TRB	R_SKEY3_DEB
.ENDIF
.IF ( C_SKEY4_EN .EQ. 1)
	TRB	R_SKEY4_DEB
.ENDIF
.IF ( C_SKEY5_EN .EQ. 1)
	TRB	R_SKEY5_DEB
.ENDIF
.IF ( C_SKEY6_EN .EQ. 1)
	TRB	R_SKEY6_DEB
.ENDIF
.IF ( C_SKEY7_EN .EQ. 1)
	TRB	R_SKEY7_DEB
.ENDIF
.IF ( C_SKEY8_EN .EQ. 1)
	TRB	R_SKEY8_DEB
.ENDIF
.IF ( C_SKEY9_EN .EQ. 1)
	TRB	R_SKEY9_DEB
.ENDIF
.IF ( C_SKEY10_EN .EQ. 1)
	TRB	R_SKEY10_DEB
.ENDIF
.IF ( C_SKEY11_EN .EQ. 1)
	TRB	R_SKEY11_DEB
.ENDIF
.IF ( C_SKEY12_EN .EQ. 1)
	TRB	R_SKEY12_DEB
.ENDIF
.IF ( C_SKEY13_EN .EQ. 1)
	TRB	R_SKEY13_DEB
.ENDIF
.IF ( C_SKEY14_EN .EQ. 1)
	TRB	R_SKEY14_DEB
.ENDIF
.IF ( C_SKEY15_EN .EQ. 1)
	TRB	R_SKEY15_DEB
.ENDIF
.IF ( C_SKEY16_EN .EQ. 1)
	TRB	R_SKEY16_DEB
.ENDIF
.IF ( C_SKEY17_EN .EQ. 1)
	TRB	R_SKEY17_DEB
.ENDIF
.IF ( C_SKEY18_EN .EQ. 1)
	TRB	R_SKEY18_DEB
.ENDIF
.IF ( C_SKEY19_EN .EQ. 1)
	TRB	R_SKEY19_DEB
.ENDIF
.IF ( C_SKEY20_EN .EQ. 1)
	TRB	R_SKEY20_DEB
.ENDIF
.IF ( C_SKEY21_EN .EQ. 1)
	TRB	R_SKEY21_DEB
.ENDIF
.IF ( C_SKEY22_EN .EQ. 1)
	TRB	R_SKEY22_DEB
.ENDIF
.IF ( C_SKEY23_EN .EQ. 1)
	TRB	R_SKEY23_DEB
.ENDIF
.ENDIF

.IFDEF C_CHK1KEY1_EN
;	JSR	BK0_CHK1KEY1_ENTER_STOP
	JSR	BK0_CHK1KEY1_INIT
.ENDIF
.IFDEF C_CHK1KEY2_EN
	JSR	BK0_CHK1KEY2_INIT
.ENDIF

.IFDEF C_CHKMKEY_EN
;	JSR	BK0_CHKMKEY_ENTER_STOP
.ENDIF

.IFDEF C_CHK_LVD_EN
	STZ CHK_LVD_DEB
.ENDIF

	RTS

