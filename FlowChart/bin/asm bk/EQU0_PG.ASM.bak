
;=========================
;	in same bank
;=========================


;IN: EQU_NO,R_EQU_DATA_IDX
;OUT: 0:EQU END,1: BUSY
;
;then call 'BK0_STOP_ALL' / 'BK0_STOP_SP_MS'
;
L_STOP_EQU:
	.IF ( C_EQU0_FLAG_EN .EQ. 1 )
	MR_CHK_EQU0_SPCH1_DIS
	.ENDIF
	MR_SET_EQU0_DLYCNT CNT_STOP ;STOP DLYCNT
	MR_SET_SP_FG
	.IF ( C_EQU0_EVT_EN .EQ. 1 )
	MR_EQU_NRL_NEXT
	STZ	EQU_EVT_EN_FG ;CLR FLAG
	STZ	EQU_EVT_OV_FG ;CLR FLAG
	.ENDIF

.IF ( C_EQU0BG1_EN .EQ. 1)
	STZ	EQU0BG1_DLYCNT
	STZ	EQU0BG1_DLYCNT+1
.ENDIF
.IF ( C_EQU0BG2_EN .EQ. 1)
	STZ	EQU0BG2_DLYCNT
	STZ	EQU0BG2_DLYCNT+1
.ENDIF
	
;	MR_WP1_STOP

	RTS


L_PLAY_EQU_NEXT:
	LDA	R_EQU_DATA_IDX
	CMP	#0FFH
	BNE	L_PLAY_EQU_NEXT_S10
;auto to SET EQU END ; for 'BK0_SPCH1_TO_EQU_END'
	JMP	L_PLAY_EQU_END
L_PLAY_EQU_NEXT_S10:
.IF (  C_EQU0_EVT_EN  .EQ. 1)
	STZ	EQU_EVT_EN_FG
	STZ	EQU_EVT_OV_FG
.ENDIF	
	INC	<R_EQU_DATA_IDX
	BRA	L_PLAY_EQU_S10

L_PLAY_EQU:
;store for compare
;--------------------------------
;	LDA	R_EQU_NO
;	CMP	#C_EQU_NOP_IDX
;	BNE	L_PLAY_EQU_S00
;	NOP
;L_PLAY_EQU_S00:
;	STA	R_EQU_NO_BK
;--------------------------------
.IFDEF R_EQU_NEXT
	LDA	#C_EQU0_NOP_IDX
	STA	R_EQU_NEXT
.ENDIF

	STZ	<R_EQU_DATA_IDX ; RESET EQU DATA IDX

L_PLAY_EQU_S10:
;	M_DET_LANG
;	BNE	L_PLAY_EQU_S13
;
	LDA	R_EQU_NO
	BIT	#C_BIT7
	BNE	L_PLAY_EQU_S11;2ND TABLE
	ASL	A
	TAX
	LDA	T_EQU_TBL,X
	STA	P0_ADDR
	
	INX
	LDA	T_EQU_TBL,X
	STA	P0_ADDR+1
	BRA	L_PLAY_EQU_S20
;
L_PLAY_EQU_S11:
	ASL	A
	TAX
	LDA	T_EQU_TBL1,X ;3RD TABLE
	STA	P0_ADDR
	
	INX
	LDA	T_EQU_TBL1,X
	STA	P0_ADDR+1
	BRA	L_PLAY_EQU_S20
L_PLAY_EQU_S13:
	LDA	R_EQU_NO
	BIT	#C_BIT7
	BNE	L_PLAY_EQU_S14;4ND TABLE
	ASL	A
	TAX
	LDA	T2_EQU_TBL,X
	STA	P0_ADDR
	
	INX
	LDA	T2_EQU_TBL,X
	STA	P0_ADDR+1
	BRA	L_PLAY_EQU_S20
;
L_PLAY_EQU_S14:
	ASL	A
	TAX
	LDA	T2_EQU_TBL1,X
	STA	P0_ADDR
	
	INX
	LDA	T2_EQU_TBL1,X
	STA	P0_ADDR+1

L_PLAY_EQU_S20:
	LDY	R_EQU_DATA_IDX
	LDA	(<P0_ADDR),Y
	STA	REG_HL	;---STORE
	CMP	#C_EQU_END
	BEQ	L_PLAY_EQU_END; END
	CMP	#C_EQU_LOOP
	BEQ	L_PLAY_EQU_LOOP
	BIT	#C_EQU_EVT_BIT;.7
	BEQ	L_PLAY_EQU_NRL;NORMAL;NOT EVT TO NEXT

	MR_EQU_EVT_NEXT

	JMP	L_PLAY_EQU_GET_EVT
L_PLAY_EQU_GET_EVT_RET:
	
	BRA	L_PLAY_EQU_S40

L_PLAY_EQU_END: 

	JMP	L_PLAY_EQU_END_USER
L_PLAY_EQU_LOOP:
;NEXT DATA FOR IDX
	INC	R_EQU_DATA_IDX
	LDY	R_EQU_DATA_IDX
	LDA	(<P0_ADDR),Y
	STA	R_EQU_DATA_IDX
	JMP	L_PLAY_EQU_S20
	
L_PLAY_EQU_ACT_NON_RET:
L_PLAY_EQU_NRL:
	MR_EQU_NRL_NEXT

.IF (  C_EQU0_EVT_EN  .EQ. 1)
	STZ	EQU_EVT_EN_FG ;clr flag
	STZ	EQU_EVT_OV_FG
.ENDIF
	
L_PLAY_EQU_S40:
	LDA	REG_HL
	AND	#C_EQU_DLY_MASK_BIT
	CMP	#C_EQU_DLY
	BEQ	L_PLAY_EQU_DLY

;equ end
;	MR_SET_EQU_FG
;	JMP	L_PLAY_EQU_END_USER
;-------------------- EQU END FLAG SET
	
L_PLAY_EQU_SP: ; with action
;
	INC	R_EQU_DATA_IDX

.IF ( C_SPCH1_NO_2B_EN .EQ. 1)
	LDY	R_EQU_DATA_IDX
	LDA	(<P0_ADDR),Y
	STA	SPCH1_NO1
.ENDIF
;get SPCH1_NO1:SPCH1_NO in next 2 byte
	INC	R_EQU_DATA_IDX
	LDY	R_EQU_DATA_IDX
	LDA	(<P0_ADDR),Y
	STA	SPCH1_NO
;
;play SP in ch1 or play midi
	M_SET_BANK L_PLAY_SPCH1
	JSR	L_PLAY_SPCH1
	MR_SET_EQU0_DLYCNT CNT_STOP ;clear EQU0_DLYCNT

L_PLAY_EQU_CONTINUE:
; check action
;0: NOP / check if last action end
;action
	JMP	L_PLAY_EQU_ACT
L_PLAY_EQU_ACT_RET:

L_PLAY_EQU_QUIT1:
	MR_SET_EQU_FG
	LDA	#1; EQU BUSY
	RTS

L_PLAY_EQU_DLY:; with action
;<1364.48MS
;	JSR	BK0_STOP_ALL; DLYCNT: stop sp flag
;get EQU0_DLYCNT1:EQU0_DLYCNT in next 2 byte
	INC	R_EQU_DATA_IDX
	LDY	R_EQU_DATA_IDX
	LDA	(<P0_ADDR),Y
	STA	EQU0_DLYCNT+1;new
	INC	R_EQU_DATA_IDX
	LDY	R_EQU_DATA_IDX
	LDA	(<P0_ADDR),Y
	STA	EQU0_DLYCNT
;


	BRA	L_PLAY_EQU_CONTINUE
;================================================
;
;================================================

;================================================
; PLAY EQU WITH EQU0_BUF
;================================================
.IF ( C_EQU0_BUF_EN .EQ. 1 )
L_PLAY_EQU_BUF_NEXT:
	INC EQU0_IDX
L_PLAY_EQU_BUF:

	LDX	EQU0_IDX
	LDA	EQU0_BUF,X
	CMP	#0FFH
	BNE	L_PLAY_EQU_BUF_S10
;END

	MR_SET_SP_FG ;clr EQU FLAG

	LDA	#0;EQU END
	RTS
	
L_PLAY_EQU_BUF_S10:
	STA	SPCH1_NO
	
	M_SET_BANK L_PLAY_SPCH1
	JSR	L_PLAY_SPCH1
	
	MR_SET_EQU_FG

	LDA	#1;EQU BUSY
	RTS
.ENDIF

T_EQU_TBL1


